user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    gzip  on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # --- NGINX Cache Configuration ---
    # Define a cache zone
    # Keys will be based on the URI and arguments
    # max_size: Maximum size of the cache
    # inactive: How long an item can remain in cache without being accessed before being removed
    # levels: Subdirectory levels for cache storage (improves performance with many files)
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=wordpress_cache:10m max_size=1g inactive=60m use_temp_path=off;

    server {
        listen 80;
        server_name _; # NGINX listens for any hostname

        # Set cache zone
        proxy_cache wordpress_cache;

        # Cache key definition (important for different URLs with params)
        proxy_cache_key "$scheme$request_method$host$request_uri";

        # Cache expiry rules (adjust as needed)
        proxy_cache_valid 200 30m;  # Cache successful responses for 30 minutes
        proxy_cache_valid 404 1m;   # Cache 404 responses for 1 minute

        # Bypass cache for certain requests (e.g., admin, POST requests)
        # Prevents caching of dynamically changing content or user-specific data
        proxy_cache_bypass $http_pragma $http_authorization $cookie_wordpress_logged_in;
        proxy_no_cache $http_pragma $http_authorization $cookie_wordpress_logged_in;

        # Add headers to debug cache status
        add_header X-Cache-Status $upstream_cache_status;

        location / {
            # Pass all requests to the WordPress container
            proxy_pass http://wordpress_crn1:80; # 'wordpress' is the service name in docker-compose
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_redirect off;
        }

        # Exclude WordPress admin and login pages from cache
        location ~ /(wp-admin|wp-login.php|wp-cron.php) {
            proxy_pass http://wordpress_crn1:80;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_redirect off;
            # Do not cache these locations
            proxy_cache_bypass 1;
            proxy_no_cache 1;
        }

        # Handle static files directly (optional, but good for performance)
        # Assumes WordPress static files are in /var/www/html
        location ~* \.(jpg|jpeg|gif|png|css|js|ico|woff|woff2|ttf|eot|svg)$ {
            expires max;
            log_not_found off;
            access_log off;
            # Optional: if you want NGINX to serve these directly from its volume
            # root /var/www/html;
            # But in this setup, NGINX is just a proxy, so it will pass to WordPress
            # unless you have a shared volume for static files between NGINX and WP.
            # For simplicity, we'll let WordPress handle them or rely on NGINX's proxy_cache for them too.
        }
    }
}